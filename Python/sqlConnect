# Knightcard Sign-In Device
# github.com/gregjoeval/KnightcardSignInDevice
# Designed for use in the Makerspace of Saint Michael's College

#Python file for connecting to the mysql database. must import mysqldb
#!/usr/bin/python

import sys
#import pymysql.cursorsv #for use with swipes(): connection to mysql database
import datetime #for use with swipes(): database entry timestamp
#import easygui #currently unused
import ctypes #for use with msgBox()
from tkinter import * #for use with successDisplay()
from tkinter import messagebox #for use with successDisplay()

# Command Prompt:
#       [Python Interpreter Path] [Script Path] [Output Mode] [Test Mode] [Output File Path]
#   Example:
#       python.exe D:\Code\Python\sqlConnect.py cl true
argPath = 0 # Argument 0: Path of script file
                # D:\Code\Python\sqlConnect.py
argOutput = 1 # Argument 2: Output Mode
                # 'db' will run the code utilizing the database
                # 'cl' will output any potential database entries to the command line
                # 'txt' will output any potential database entries to a text file [NOT YET IMPLEMENTED]
argTest = 2 # Argument 2: Test Mode
                # Any string or 'false' will execute the script normally
                # 'true' will run the scripts test code
argOutputPath = 3 # Argument 3: Output File Path
                # If the text file output type is specified then the script will look for a path
                # If a path is not specified the file will be created in the same directory as the script file
                # If a path is not specified but the text file output type is specified then the default output type will be used

# Function(s):
'''
def successDisplay():
    root = Tk()
    root.withdraw()
    messagebox.showinfo("Say Hello", "Hello World")
    root.after(1000, lambda: root.destroy()) # Destroy the widget after 30 seconds
'''
'''
def msgBox(title, text, style): #For use with Windows, mainly for testing purposes
    ctypes.windll.user32.MessageBoxW(0, text, title, style)
    # Styles:
    # 0 : OK
    # 1 : OK | Cancel
    # 2 : Abort | Retry | Ignore
    # 3 : Yes | No | Cancel
    # 4 : Yes | No
    # 5 : Retry | No
    # 6 : Cancel | Try Again | Continue
'''
def swipes(outputMode, testMode, outputFilePath):
    # Input
    if testMode == 1:
        id = input("Waiting for TEST swipe...")
        print("Input: \'", id, "\'")
    else:
        id = input("Waiting for swipe...")

    # Error Checking
    if "E?" in id:
        print("Bad swipe, try again.")
        return

    # Gather sign-in data
    try:
        shortID = int(id[1:10]) # get useful id portion from magnetic strip
        if testMode == 1:
            print("shortID: \'", shortID, "\'")
    except ValueError:
        print("Invalid card number, try again.")
        if testMode == 1:
            print("id[1:10]: \'", id[1:10], "\'")
        return
    today = datetime.date.today() #get date
    if testMode == 1:
        print("today: \'", today, "\'")
    time = datetime.datetime.now().time() #get time
    if testMode == 1:
        print("time: \'", time, "\'")

    # Output
    data = (shortID,today,time)
    if testMode == 1:
        print("data: \'", data, "\'")
    if outputMode == 0: # Database
        print("Connecting to database...")
        db = pymysql.connect(host="localhost", user="cardreader", passwd="smcvt", db="cardreader") #insert db info, this user has insert only
        cur = db.cursor() #needed for executing queries
        sql="INSERT INTO student VALUES (%s,%s,%s)" #insert values from text file.
        cur.execute(sql,data)
        db.commit()
    elif outputMode == 1: # Text File
        outputFileName = "KnightcardSignInList.txt"
        outputFilePath += outputFileName
        with open(outputFilePath, "a") as out: # Create/Open text file
            dataOutputString = str(data[0])+" | "+str(data[1])+" | "+str(data[2])
            if testMode == 1:
                print("dataOutputString: \'", dataOutputString, "\'")
            out.write(dataOutputString+"\n") # Append to the text file
    elif outputMode == 2: # Terminal
        print("Sign-In Data: \'", data, "\'")
    else:
        print("INVALID OUTPUT MODE!")

    #successDisplay()
    return

# Main:
# Check for file path input
filePath = ""
if len(sys.argv) > 0:
    filePath = sys.argv[argPath]
else:
    print("No file path specified.")

# Check for outputMode argument input
outputMode = 0
if len(sys.argv) > 1:
    if str(sys.argv[argOutput]) == "db":
        outputMode = 0 # output goes to a database
    elif str(sys.argv[argOutput]) == "txt":
        outputMode = 1 # output goes to a text file
        # Check for file path
        try:
            outputFilePath = sys.argv[argOutputPath]
        except IndexError:
            outputFilePath = filePath
            char = ''
            while char != '\\':
                length = len(outputFilePath)-1
                char = outputFilePath[length]
                outputFilePath = outputFilePath[:length]
            outputFilePath = filePath[:length+1] # Output Text File Path
    elif str(sys.argv[argOutput]) == "cl":
        outputMode = 2 # output goes to the terminal
else: # if this argument wasn't given... Default output type
    outputMode = 2 # output goes to the terminal

# Check for testMode argument input
testMode = 0
if len(sys.argv) > 2:
    if (str(sys.argv[argTest]) == "true") or (str(sys.argv[argTest]) == "True"):
        testMode = 1 # Running in Test Mode
        print("Test Mode Initiated.")
        for i in range(0, len(sys.argv)):
            print("argv[", i,"]: ", sys.argv[i])
        if outputMode == 1:
            print("Text File Output Path:", outputFilePath)
        print()
else: # if this argument wasn't given...
    testMode = 0 # Not running in Test Mode

while True:
    swipes(outputMode, testMode, outputFilePath)
    print() #puts space after every call to swipes()
